/**
 * Definition for singly-linked list.
 * function ListNode(val, next) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.next = (next===undefined ? null : next)
 * }
 */
/**
 * @param {ListNode} head
 * @param {number} val
 * @return {ListNode}
 */
var removeElements = function(head, val) {
    // Handle the case where the head node(s) needs to be removed
    while (head !== null && head.val === val) {
        head = head.next; // Move the head pointer to the next node
    }

    // If the list becomes empty after removing head nodes
    if (head === null) {
        return null;
    }

    // Traverse the list starting from the first valid node
    let current = head;
    while (current.next !== null) {
        if (current.next.val === val) {
            // Remove the node by skipping it
            current.next = current.next.next;
        } else {
            // Move to the next node
            current = current.next;
        }
    }

    return head;
};
